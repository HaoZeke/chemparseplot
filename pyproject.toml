[build-system]
build-backend = "hatchling.build"
requires = [
  "hatch-vcs",
  "hatchling",
]

[tool.hatch.build.hooks.vcs]
version-file = "_version.py"

[tool.hatch.build]
include = [
  "chemparseplot/**/*.py",
  "chemparseplot/*.py",
  "/tests",
]

[project]
name = "chemparseplot"
description = "Parsers and plotting tools for computational chemistry"
readme = "readme.md"
keywords = [
  "compchem",
  "parser",
  "plot",
]
license = {text = "MIT"}
authors = [
    { name = "Rohit Goswami", email = "rog32@hi.is" },
]
requires-python = ">=3.9"
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
]
dynamic = [
  "version",
]
dependencies = [
  "numpy>=1.26.2",
  "pint>=0.22",
]
[project.optional-dependencies]
plot = [
  "matplotlib>=3.8.2",
]
[project.urls]
Documentation = "https://github.com/HaoZeke/chemparseplot#readme"
Issues = "https://github.com/HaoZeke/chemparseplot/issues"
Source = "https://github.com/HaoZeke/chemparseplot"

[tool.hatch.version]
source = "vcs"

[tool.pdm.dev-dependencies]
lint = [
    "ruff>=0.1.6",
]
test = [
    "pytest>=7.4.3",
    "coverage[toml]>=7.3.2",
]

[tool.pdm.scripts]
check_ruff = "ruff ."
ruff_fix = "ruff --fix ."
ruff_format = "ruff format ."
lint = {composite = ["ruff_fix", "ruff_format"]}
test = "pytest tests"

[tool.black]
target-version = ["py312"]
line-length = 90
skip-string-normalization = true

[tool.ruff]
target-version = "py312"
line-length = 90
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["chemparseplot"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
# __init__.py can import without use
"__init__.py" = ["F401"]

[tool.coverage.run]
source_pkgs = ["chemparseplot", "tests"]
branch = true
parallel = true
omit = [
  "_version.py",
]

[tool.coverage.paths]
chemparseplot = ["src/chemparseplot", "*/chemparseplot/src/chemparseplot"]
tests = ["tests", "*/chemparseplot/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
